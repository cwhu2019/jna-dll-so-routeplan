package cwhu.dllSolibLoad.lib.model.struct;

import com.sun.jna.Native;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : line 17</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class RPLaneJNA extends Structure {
	public NativeLong iLaneID;
	/** C type : Coord3DJNA* */
	public Coord3DJNA.ByReference coordArray;
	public int iCoordSize;
	public byte bNeedChangeLane;
	public RPLaneJNA() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("iLaneID", "coordArray", "iCoordSize", "bNeedChangeLane");
	}
	/** @param coordArray C type : Coord3DJNA* */
	public RPLaneJNA(NativeLong iLaneID, Coord3DJNA.ByReference coordArray, int iCoordSize, byte bNeedChangeLane) {
		super();
		this.iLaneID = iLaneID;
		this.coordArray = coordArray;
		this.iCoordSize = iCoordSize;
		this.bNeedChangeLane = bNeedChangeLane;
	}
	public static class ByReference extends RPLaneJNA implements Structure.ByReference {

	};
	public static class ByValue extends RPLaneJNA implements Structure.ByValue {

	};

	public void freeMem(){
		//手动释放内存
		Pointer pCoordArray = coordArray.getPointer();
		long peerCoordArray = Pointer.nativeValue(pCoordArray);
		Native.free(peerCoordArray);
		Pointer.nativeValue(pCoordArray, 0);
	}
}

