package cwhu.dllSolibLoad.lib.model.struct;

import com.sun.jna.NativeLong;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : line 24</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class RPLinkJNA extends Structure {
	public NativeLong iLinkID;
	/** C type : Coord3DJNA* */
	public Coord3DJNA.ByReference coordArray;
	public int iCoordSize;
	/** C type : RPLaneJNA* */
	public RPLaneJNA.ByReference laneArray;
	public int iLaneSize;
	public RPLinkJNA() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("iLinkID", "coordArray", "iCoordSize", "laneArray", "iLaneSize");
	}
	/**
	 * @param coordArray C type : Coord3DJNA*<br>
	 * @param laneArray C type : RPLaneJNA*
	 */
	public RPLinkJNA(NativeLong iLinkID, Coord3DJNA.ByReference coordArray, int iCoordSize, RPLaneJNA.ByReference laneArray, int iLaneSize) {
		super();
		this.iLinkID = iLinkID;
		this.coordArray = coordArray;
		this.iCoordSize = iCoordSize;
		this.laneArray = laneArray;
		this.iLaneSize = iLaneSize;
	}
	public static class ByReference extends RPLinkJNA implements Structure.ByReference {

	};
	public static class ByValue extends RPLinkJNA implements Structure.ByValue {

	};
}

