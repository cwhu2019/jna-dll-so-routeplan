package cwhu.dllSolibLoad.lib.model.struct;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : line 31</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class RPResultJNA extends Structure {
	public byte RPFlag;
	/** C type : RPPlacesJNA */
	public RPPlaceJNA RPPlaces;
	/** C type : RPLinkJNA* */
	public RPLinkJNA.ByReference linkArray;
	public double dRouteLength;
	public RPResultJNA() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("RPFlag", "RPPlaces", "linkArray", "dRouteLength");
	}
	/**
	 * @param RPPlaces C type : RPPlacesJNA<br>
	 * @param linkArray C type : RPLinkJNA*
	 */
	public RPResultJNA(byte RPFlag, RPPlaceJNA RPPlaces, RPLinkJNA.ByReference linkArray, double dRouteLength) {
		super();
		this.RPFlag = RPFlag;
		this.RPPlaces = RPPlaces;
		this.linkArray = linkArray;
		this.dRouteLength = dRouteLength;
	}
	public static class ByReference extends RPResultJNA implements Structure.ByReference {
		
	};
	public static class ByValue extends RPResultJNA implements Structure.ByValue {
		
	};
}
